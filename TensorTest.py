"""Tensorflow Stock Prediction Test written by Sakari Woods.
This uses a csv file of SP500 stock information to graph all prices,
then graphs a moving average to visually demonstrate where points-of-interest are located.
Once these are displayed, the SP500 price information is fed into a Tensorflow neural net
in order to locate trends or correlations in prices.
Finished:
Data importation and filtering
Plotting system
Currently working on:
Implementation into Tensorflow
Up next:
Coloring plotted lines as a heat-graph to show how content the AI is with it's decision.
"""

#Dependencies are imported here
import tensorflow as tf
import pandas as pd
import matplotlib.pyplot as pt
import numpy as np

#Import the stock data using pandas, a very useful library that can manipulate csv files.
data = pd.read_csv('sp500.csv')

#The first column of the csv has the dates. Because we only want price values, we can remove this from imported data.
#(we could keep this in order to factor in time-spans of when stocks increased, and how long were they deemed profitable, maybe later!).
#data = data.drop(['DATE'], 1)

#Set the dimensions of the data, think of this as we're setting the dimensions of a big box that holds our data.

#NEEDS EDIT HERE FOR EASIER EXPLANATION ON NUMPY DIMENSION ASSIGNMENT.
#Note: How the coordinates work in this data is as such: [5][3] would be the data in the csv file 5 rows down, 3 rows to the right.
n = data.shape[0]
p = data.shape[1]

#We take our stock data and turn it into a numpy array(this is what our plotter and Tensorflow will use).
data = data.values

#Set the window size to something manageable, put a label on it, and set the color of the line to blue. Note we chose data[0], that is our csv information for all SP500.
#(The csv offers other stock information, but we're just messing with SP500).
#We also set the limits of our viewing window so the lines aren't compressed or too stretched out, and we give the graph a nice title and legend, located on the upper right.
print(data[0])
pt.figure(figsize=(10,5))
pt.xlim(0,50)
pt.ylim(2340,2370)

#pt.plot(data[0],"-b", label="Prices")
vdat = []
for i in range(75):#Developer note to switch out vdat and iterative loop for faster results by passing in raw data of .csv file.
    vdat.append(data[i])
pt.plot(vdat,"-r",label="Price")
pt.title("Stock Prediction Test")
#This piece is a little weird, we create another array out of our SP500 data, an enumerate it inside a for loop while calculating the average of each value, and the value behind it.
#Basically, this gets the average, and makes an array of all average values for all SP500 data. Pretty neat!
#mylist = data[0]
mylist = vdat
N = 3
cumsum, moving_aves = [0], []
for i, x in enumerate(mylist, 1):
    cumsum.append(cumsum[i-1] + x)
    if i>=N:
        moving_ave = (cumsum[i] - cumsum[i-N])/N
        #can do stuff with moving_ave here.
        moving_aves.append(moving_ave)

#Using the average data, we plot another line, this time named "Moving Average", and make it red.
pt.plot(moving_aves,"-b", label="Moving Average")
pt.legend(loc='upper right')
#Finally, we tell the program to render and draw everything on the screen.
#pt.show(data.all())
#pt.show()

#IN DEVELOPMENT: TENSORFLOW INTEGRATION FOR RECURRENT NEURAL NETWORK.

#Evaluate derivatives.
print("EVALUATING")
pchange = []
print(data[0])
print(data[1])
pchange.append(data[0]-data[1])
print("pchange is ",pchange[0])
print(data[2])
print(data[3])
pchange.append(data[1]-data[2])
print("pchange is ",pchange[1])
print("DONE")
a = 10
b=2365
area= (30 * 5)
colors = "g"
pt.scatter(a,b,s=area,c=colors,alpha=0.5)
#pt.plot(pchange,"-g", label="Derivative").
pt.show()

#Now we build our reccurent neural network.
#Explanation of graphs:
#Blue bars: training input signal.
#Red bars: echos of training output.
#Green bars: echos generated by the neural network.
#Top-Left: output of loss function. Lower values = more accurate.


num_epochs = 100
total_series_length = 50000
truncated_backprop_length = 15
state_size = 4
num_classes = 2
echo_step = 3
batch_size = 5
num_batches = total_series_length//batch_size//truncated_backprop_length


#This is used to generate random data so we can get the recurrent neural network up and running before initializing
#it with our own stock data.
def generateData():
    x = np.array(np.random.choice(2, total_series_length, p=[0.5, 0.5]))
    y = np.roll(x, echo_step)
    y[0:echo_step] = 0

    x = x.reshape((batch_size, -1))  # The first index changing slowest, subseries as rows
    y = y.reshape((batch_size, -1))

    return (x, y)

batchX_placeholder = tf.placeholder(tf.float32, [batch_size, truncated_backprop_length])
batchY_placeholder = tf.placeholder(tf.int32, [batch_size, truncated_backprop_length])

init_state = tf.placeholder(tf.float32, [batch_size, state_size])

W = tf.Variable(np.random.rand(state_size+1, state_size), dtype=tf.float32)
b = tf.Variable(np.zeros((1,state_size)), dtype=tf.float32)

W2 = tf.Variable(np.random.rand(state_size, num_classes),dtype=tf.float32)
b2 = tf.Variable(np.zeros((1,num_classes)), dtype=tf.float32)

# Unpack columns
inputs_series = tf.unstack(batchX_placeholder, axis=1)
labels_series = tf.unstack(batchY_placeholder, axis=1)

# Forward pass
current_state = init_state
states_series = []
for current_input in inputs_series:
    current_input = tf.reshape(current_input, [batch_size, 1])
    input_and_state_concatenated = tf.concat([current_input, current_state],1)  # Increasing number of columns

    next_state = tf.tanh(tf.matmul(input_and_state_concatenated, W) + b)  # Broadcasted addition
    states_series.append(next_state)
    current_state = next_state

logits_series = [tf.matmul(state, W2) + b2 for state in states_series] #Broadcasted addition
predictions_series = [tf.nn.softmax(logits) for logits in logits_series]

logits=logits_series
print("logits:",logits)
print("length:",len(logits))

losses = [tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits_series,labels=labels_series)]
total_loss = tf.reduce_mean(losses)


train_step = tf.train.AdagradOptimizer(0.3).minimize(total_loss)

def plot(loss_list, predictions_series, batchX, batchY):
    pt.subplot(2, 3, 1)
    pt.cla()
    pt.plot(loss_list)

    for batch_series_idx in range(5):
        one_hot_output_series = np.array(predictions_series)[:, batch_series_idx, :]
        single_output_series = np.array([(1 if out[0] < 0.5 else 0) for out in one_hot_output_series])

        pt.subplot(2, 3, batch_series_idx + 2)
        pt.cla()
        pt.axis([0, truncated_backprop_length, 0, 2])
        left_offset = range(truncated_backprop_length)
        pt.bar(left_offset, batchX[batch_series_idx, :], width=1, color="blue")
        pt.bar(left_offset, batchY[batch_series_idx, :] * 0.5, width=1, color="red")
        pt.bar(left_offset, single_output_series * 0.3, width=1, color="green")

    pt.draw()
    pt.pause(0.0001)


with tf.Session() as sess:
    sess.run(tf.initialize_all_variables())
    pt.ion()
    pt.figure()
    pt.show()
    loss_list = []

    for epoch_idx in range(num_epochs):
        x,y = generateData()
        _current_state = np.zeros((batch_size, state_size))

        print("New data, epoch", epoch_idx)

        for batch_idx in range(num_batches):
            start_idx = batch_idx * truncated_backprop_length
            end_idx = start_idx + truncated_backprop_length

            batchX = x[:,start_idx:end_idx]
            batchY = y[:,start_idx:end_idx]

            _total_loss, _train_step, _current_state, _predictions_series = sess.run(
                [total_loss, train_step, current_state, predictions_series],
                feed_dict={
                    batchX_placeholder:batchX,
                    batchY_placeholder:batchY,
                    init_state:_current_state
                })

            loss_list.append(_total_loss)

            if batch_idx%100 == 0:
                print("Step",batch_idx, "Loss", _total_loss)
                plot(loss_list, _predictions_series, batchX, batchY)

#pt.ioff()
#pt.show()